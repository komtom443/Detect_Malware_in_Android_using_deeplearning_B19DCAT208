import dgl
import random

from typing import Union, Tuple, List
from pathlib import Path


class Dataset:
    def __init__(
            self,
            train_path: Union[str, Path],
            val_path: Union[str, Path],
    ) -> None:
        train_path = Path(train_path)
        if not train_path.exists():
            raise FileNotFoundError(f"File nguồn {train_path} không tồn tại!")

        val_path = Path(val_path)
        if not val_path.exists():
            raise FileNotFoundError(f"File nguồn {val_path} không tồn tại!")

        self.train_dataset = [self.__get_sample(
            path) for path in train_path.iterdir()]
        self.val_dataset = [self.__get_sample(
            path) for path in val_path.iterdir()]

    def __get_sample(self,
                     path: Union[str, Path]
                     ) -> Tuple[dgl.DGLGraph, int]:
        label = 0 if 'benig' in str(Path(path).stem).lower() else 1
        graphs, _ = dgl.data.utils.load_graphs(str(path))
        graph: dgl.DGLGraph = dgl.add_self_loop(graphs[0])
        return [graph, label]

    def __get_label(self,
                    input_list: List[Tuple[dgl.DGLGraph, int]]
                    ) -> List:
        vector_list, label_list = [], []
        for sample in input_list:
            vector_list.append(sample[0])
            label_list.append(sample[1])
        return vector_list, label_list

    def get_shuffle(self):
        random.shuffle(self.train_dataset)
        random.shuffle(self.val_dataset)

        train_graph, train_label = self.__get_label(self.train_dataset)
        val_graph, val_label = self.__get_label(self.val_dataset)
        print(len(train_graph), len(val_graph))
        return train_graph, train_label, val_graph, val_label
