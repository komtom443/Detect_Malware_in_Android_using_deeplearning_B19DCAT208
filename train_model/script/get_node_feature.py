import dgl
import torch

ATTRIBUTES = ['external', 'entrypoint', 'native',
              'public', 'static', 'codesize', 'api', 'user', 'function_name']


def get_record_feature(graph):
    features = []
    for feature in ATTRIBUTES:
        feature_vector = graph.ndata[feature]
        if feature_vector.dim() == 1:
            features.append(feature_vector.unsqueeze(1))
        else:
            features.append(feature_vector)
    return torch.cat(features, dim=1)


if __name__ == '__main__':
    graphs, _ = dgl.data.utils.load_graphs(
        str('dataset/graph/test/Adware0000.fcg'))
    graph: dgl.DGLGraph = dgl.add_self_loop(graphs[0])
    res = get_record_feature(graph)
    print()
    print('============================================')
    print()
    print(res)
    print(res.shape)
