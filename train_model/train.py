import time
import os
from pathlib import Path
from typing import Union, List
import random
import hydra
import numpy as np
from sklearn.metrics import f1_score, accuracy_score
import os
import dgl
import wandb
import torch
from sklearn.ensemble import RandomForestClassifier
from omegaconf import DictConfig
from script.dataset import Dataset
from script.get_embbeding_model import get_embbeding_model
from script.get_embbeding_algorithm import get_embbeding_algorithm
from script.get_classification_algorithm import get_classification_algorithm
from script.get_node_feature import get_record_feature
import dgl
import torch
import numpy as np
import pytorch_lightning as pl

from typing import Any, Optional, Tuple

from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, confusion_matrix


@hydra.main(config_path="conf", config_name="config")
def train_model(cfg: DictConfig):
    print(cfg['model']['conv_algorithm'])
    time_checkpoint1 = time.time()
    dataset = Dataset(**cfg['dataset'])

    train_vector = []
    pred_vector = []
    conv_layer = get_embbeding_model(**cfg['model'], dataset=dataset)
    rf_layer = get_classification_algorithm('KNN')
    train_graph, train_label, val_graph, val_label = dataset.get_shuffle()

    for index, sample in enumerate(train_graph):
        h = get_record_feature(sample)
        h = conv_layer(sample, h)
        hg = np.average(h.detach().numpy(), axis=0).tolist()
        train_vector.append(hg)
        if index % 100 == 0:
            print(f'Training step: {index}/{len(train_graph)}')
    rf_layer.fit(train_vector, train_label)

    for index, sample in enumerate(val_graph):
        h = get_record_feature(sample)
        h = conv_layer(sample, h)
        hg = np.average(h.detach().numpy(), axis=0).tolist()
        pred_vector.append(hg)
        if index % 100 == 0:
            print(f'Validation step: {index}/{len(val_graph)}')
    predictions = rf_layer.predict(pred_vector)

    print('==========================')
    print(f'Accuracy {accuracy_score(predictions,val_label)}')
    print(f'Precision: {precision_score(predictions, val_label)}')
    print(f'Recall: {recall_score(predictions, val_label)}')
    print(f'F1: {f1_score(predictions,val_label)}')
    print(
        f'Confusion Matrix:{confusion_matrix(predictions, val_label)}')
    print('==========================')
    return None


if __name__ == '__main__':
    train_model()
