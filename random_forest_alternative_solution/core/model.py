from typing import Any, Mapping
from typing import Tuple, Optional, Dict

import dgl
import torch
import torch.nn as nn
import dgl.nn.pytorch as graph_nn
import pytorch_lightning as pl
import torchmetrics as metrics
import torch
import torch.nn.functional as F

from dgl.nn import Sequential
from torchmetrics import Metric
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import log_loss


class RandomForestModel(pl.LightningModule):
    def __init__(
        self,
        input_dimension: int,
        convolution_algorithm: str,
        convolution_count: int
    ) -> None:
        super().__init__()
        self.save_hyperparameters()
        self.convolution_layers = []
        convolution_dimensions = [64, 32, 16]
        for dimension in convolution_dimensions[:convolution_count]:
            self.convolution_layers.append(self.__get_layer(
                input_alorithm=convolution_algorithm,
                in_feats=input_dimension,
                out_feats=dimension
            ))
            input_dimension = dimension
        self.convolution_layers = Sequential(*self.convolution_layers)
        self.pre_dimension = input_dimension
        self.classify = nn.Linear(input_dimension, 1)

        self.loss_func = nn.BCEWithLogitsLoss()
        self.train_metrics = self.__get_metric_dict('train')
        self.val_metrics = self.__get_metric_dict('val')
        self.test_metrics = self.__get_metric_dict('test')
        self.test_outputs = nn.ModuleDict({
            'confusion_matrix': metrics.ConfusionMatrix(num_classes=2, task='multiclass'),
            'prc': metrics.PrecisionRecallCurve(task='binary'),
            'roc': metrics.ROC(task='binary')
        })

    def __get_layer(
        self,
        convolution_algorithm: str,
        in_feats: int,
        out_feats: int
    ) -> Optional[nn.Module]:
        supported_algorithm = {
            'GraphConv': graph_nn.GraphConv(
                in_feats,
                out_feats,
                activation=F.relu
            ),
            'GraphSAGE': graph_nn.SAGEConv(
                in_feats,
                out_feats,
                activation=F.relu,
                aggregator_type='mean',
                norm=F.normalize
            ),
            'GATConv': graph_nn.GATConv(
                in_feats,
                out_feats,
                activation=F.relu,
                num_heads=1
            )
        }
        if convolution_algorithm in supported_algorithm.keys():
            return supported_algorithm[convolution_algorithm]
        return supported_algorithm['GraphSAGE']

    def __get_metric_dict(stage: str) -> Mapping[str, Metric]:
        return nn.ModuleDict({
            f'{stage}_accuracy': metrics.Accuracy(task='binary'),
            f'{stage}_precision': metrics.Precision(num_classes=1, task='binary'),
            f'{stage}_recall': metrics.Recall(num_classes=1, task='binary'),
            f'{stage}_f1': metrics.FBetaScore(num_classes=1, task='binary')
        })

    def foward(self, g: dgl.DGLGraph) -> torch.Tensor:
        with g.local_scope():
            h = g.ndata['features']
            h = self.convolution_layers(g, h)
            g.ndata['h'] = h if len(self.convolution_layers) > 0 else h[0]

            hg = dgl.mean_nodes(g, 'h')
            return self.classify(hg).squeeze()

    def training_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int) -> torch.Tensor:
        bg, label = batch
        logits = self.forward(bg)
        loss = self.loss_func(logits, label)
        prediction = torch.sigmoid(logits)
        for metric_name, metric in self.train_metrics.items():
            metric.update(prediction, label)
        self.log('train_loss', loss, on_step=True, on_epoch=True)
        return loss

    def validation_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int):
        bg, label = batch
        logits = self.forward(bg)
        loss = self.loss_func(logits, label)
        prediction = torch.sigmoid(logits)
        for metric_name, metric in self.val_metrics.items():
            metric.update(prediction, label)
        self.log('val_loss', loss, on_step=False, on_epoch=True)
        return loss

    def test_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int):
        bg, label = batch
        logits = self.forward(bg)
        prediction = torch.sigmoid(logits)
        loss = self.loss_func(logits, label)
        for metric_name, metric in self.test_metrics.items():
            metric.update(prediction, label)
        for metric_name, metric in self.test_outputs.items():
            metric.update(prediction, label)
        self.log('test_loss', loss, on_step=False, on_epoch=True)
        return loss

    def configure_optimizers(self) -> torch.optim.Adam:
        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
        return optimizer


print(pl.__version__)
print(torch.__version__)
