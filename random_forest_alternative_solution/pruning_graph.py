from pathlib import Path
from networkx import MultiDiGraph
from typing import List, Set, Dict
from androguard.core.analysis.analysis import MethodAnalysis


class GraphPruning:
    PSCOUNT_API_LIST = []
    MAX_STEP_K = 4

    @staticmethod
    def _get_pscout_api(filePath: Path):
        try:
            lines = open(filePath, "r").readlines()
            for line in lines:
                line = [x.strip()[1:-1] for x in line.split(" ")]
                GraphPruning.PSCOUNT_API_LIST.append({
                    "class_name": line[0],
                    "method": line[1],
                    "parameters": line[2]
                })
            return GraphPruning.PSCOUNT_API_LIST
        except FileNotFoundError:
            print("fileNotFound")

    @staticmethod
    def nodeConvert(node: MethodAnalysis):
        parameters = ""
        for x in str(node.method.get_descriptor()[1:].split(")")[0]).replace("/", ".").split(';'):
            x = x.strip()
            try:
                if x[0] == 'L':
                    x = x[1:]
                parameters += f",{x}"
            except:
                continue

        return {
            "class_name": str(node.class_name)[1:-1].replace("/n", "").replace("/", "."),
            "method": node.method.name,
            "parameters": parameters[1:]
        }

    @staticmethod
    def _pscout_check(node: MethodAnalysis):
        node = GraphPruning.nodeConvert(node)
        for api in GraphPruning.PSCOUNT_API_LIST:
            if (node["class_name"] == api["class_name"]
                and node["method"] == api["method"]
                    and node["parameters"] == api["parameters"]):
                return True
        return False

    @staticmethod
    def _get_sensitive_api(fcg: MultiDiGraph):
        sensitive_apis = []
        for node in fcg.nodes:
            if (GraphPruning._pscout_check(node)):
                sensitive_apis.append(node)
        return sensitive_apis

    @staticmethod
    def _get_node_predecessors(graph: MultiDiGraph, node: MethodAnalysis,
                               visitedNodes: Set[MethodAnalysis],
                               node_steps: Dict[MethodAnalysis, int],
                               max_step: int = -1):

        def dfs(current_step: int, current_node: MethodAnalysis):
            nonlocal visitedNodes
            nonlocal node_steps
            for parent in graph.predecessors(current_node):
                if current_step == max_step:
                    return
                if parent not in visitedNodes:
                    if parent not in node_steps or node_steps[parent] > current_step:
                        node_steps[parent] = current_step
                    visitedNodes.add(parent)
                    dfs(current_step + 1, parent)

        dfs(0, node)

    @staticmethod
    def _get_nodes_predecessors(graph: MultiDiGraph, nodes: List[MethodAnalysis], max_step=-1) -> List[MethodAnalysis]:
        visitedNodes = set()
        node_steps = dict()
        for node in nodes:
            GraphPruning._get_node_predecessors(
                graph, node, visitedNodes, node_steps, max_step)
        return visitedNodes, node_steps

    @staticmethod
    def _get_node_successors(graph: MultiDiGraph,
                             node: MethodAnalysis,
                             visitedNodes: Set[MethodAnalysis],
                             input_step=0,
                             max_step=-1):
        print(input_step, max_step)

        def dfs(current_step: int, current_node: MethodAnalysis):
            nonlocal visitedNodes
            for successor in graph[current_node]:
                if current_step == max_step:
                    return
                if successor not in visitedNodes:
                    visitedNodes.add(successor)
                    dfs(current_step + 1, successor)

        dfs(input_step, node)
        return

    @staticmethod
    def _get_nodes_successors(graph: MultiDiGraph,
                              nodes: List[MethodAnalysis],
                              node_steps: Dict[MethodAnalysis, int],
                              max_step=-1):
        visitedNodes = set()
        for node in nodes:
            GraphPruning._get_node_successors(
                graph, node, visitedNodes, node_steps[node], max_step)
        return visitedNodes

    @staticmethod
    def _pruning_graph(graph: MultiDiGraph, max_step=-1) -> MultiDiGraph:
        sensitive_apis = GraphPruning._get_sensitive_api(graph)
        predecessors, predecessors_node = GraphPruning._get_nodes_predecessors(
            graph, sensitive_apis, max_step=max_step)
        successor_list = GraphPruning._get_nodes_successors(
            graph, predecessors, node_steps=predecessors_node, max_step=max_step)
        pruning_nodes = []
        if len(successor_list) == 0:
            return graph

        for node in graph.nodes():
            if node not in successor_list:
                pruning_nodes.append(node)
        graph.remove_nodes_from(pruning_nodes)
        return graph
