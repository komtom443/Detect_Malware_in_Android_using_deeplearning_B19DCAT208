import dgl

from typing import Union, Tuple, List
from pathlib import Path


class Dataset:
    def __init__(
            self,
            source_path: Union[str, Path],
            ratios: Tuple[float, float] = [.75, .25]
    ) -> None:
        source_path = Path(source_path)
        if not source_path.exists():
            raise FileNotFoundError(f"File nguồn {source_path} không tồn tại!")
        self.none_split = [self.__get_sample(
            path) for path in source_path.iterdir()]

        train_count = int(ratios[0] / (sum(ratios)) * len(self.none_split))

        self.train_dataset = self.__get_label(self.none_split[:train_count]),
        self.val_dataset = self.__get_label(self.none_split[train_count:])

    def __get_sample(self,
                     path: Union[str, Path]
                     ) -> Tuple[dgl.DGLGraph, int]:
        label = 1 if 'benig' in str(Path(path).stem).lower() else 0
        graphs, _ = dgl.data.utils.load_graphs(str(path))
        graph: dgl.DGLGraph = dgl.add_self_loop(graphs[0])
        return [graph, label]

    def __get_label(self,
                    input_list: List[Tuple[dgl.DGLGraph, int]]
                    ):
        vector_list, label_list = [], []
        for sample in input_list:
            vector_list.append(sample[0])
            label_list.append(sample[1])
        return [vector_list, label_list]
