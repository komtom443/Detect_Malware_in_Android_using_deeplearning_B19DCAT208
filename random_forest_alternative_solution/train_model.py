import hydra
import numpy as np
from sklearn.metrics import f1_score, accuracy_score
import wandb
import dgl
from sklearn.ensemble import RandomForestClassifier
from omegaconf import DictConfig
from pathlib import Path


def get_samples(file_dir: str):
    file_dir = Path(file_dir)
    samples, labels = [], []
    for file in file_dir.iterdir():
        name = str(file.stem)
        graphs, _ = dgl.data.utils.load_graphs(str(file))
        graph: dgl.DGLGraph = dgl.add_self_loop(graphs[0])
        # graph.ndata['function_name'] = graph.ndata['function_name'].view(-1, 1)
        print(name.lower(), 1 if 'benig' in name.lower() else 0)
        samples.append(np.average(graph.ndata['function_name'], axis=0))
        labels.append(1 if 'benig' in name.lower() else 0)
    return samples, labels


@hydra.main(config_path="config", config_name="conf")
def train_model(cfg: DictConfig):
    wandb.init(project='your-project-name')

    train_sample, train_label = get_samples(cfg['data']['train_dir'])
    test_sample, test_label = get_samples(cfg['data']['test_dir'])

    rf = RandomForestClassifier(n_estimators=int(cfg['trainer']['max_epochs']))
    rf.fit(train_sample, train_label)

    test_predictions = rf.predict(test_sample)
    test_accuracy = accuracy_score(test_label, test_predictions)
    test_f1_score = f1_score(test_label, test_predictions)

    wandb.log({"test_accuracy": test_accuracy, "test_f1_score": test_f1_score})

    wandb.sklearn.plot_classifier(
        rf, train_sample, test_sample, train_label, test_label)


if __name__ == '__main__':
    train_model()
