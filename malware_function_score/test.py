from pathlib import Path
from androguard.misc import AnalyzeAPK
from androguard.core.analysis.analysis import MethodAnalysis
from networkx import MultiDiGraph
from glob import glob
sensitive_list = []


def _get_pscout_api(filePath: Path):
    try:
        lines = open(filePath, "r").readlines()
        for line in lines:
            line = [x.strip()[1:-1] for x in line.split(" ")]
            sensitive_list.append({
                "class_name": line[0],
                "method": line[1],
                "parameters": line[2]
            })

    except FileNotFoundError:
        print("fileNotFound")


def node_parameter_convert(input_str: str):
    input_str = input_str.strip().split()
    for element in input_str:
        

    return res


def nodeConvert(node: MethodAnalysis):
    parameters = ""
    print(node.method.get_descriptor())
    for x in str(node.method.get_descriptor()[1:].split(")")[0]).replace("/", ".").split(';'):
        x = x.strip()
        try:
            if x[0] == 'L':
                x = x[1:]
            parameters += f",{x}"
        except:
            continue

    return {
        "class_name": str(node.class_name)[1:-1].replace("/n", "").replace("/", "."),
        "method": node.method.name,
        "parameters": parameters[1:]
    }


def _pscout_check(node: MethodAnalysis):
    node = nodeConvert(node)
    for api in sensitive_list:
        if (node["class_name"] == api["class_name"]
            and node["method"] == api["method"]
                and node["parameters"] == api["parameters"]):
            return True
    return False


def _get_sensitive_api(fcg: MultiDiGraph):
    sensitive_apis = []
    for node in fcg.nodes:
        if (_pscout_check(node)):
            sensitive_apis.append(node)
    return sensitive_apis


_get_pscout_api(
    'process_dataset/sensitive_apis/pscoutApi.txt')


# print(_get_sensitive_api(dx.get_call_graph()))
name = 'Benign-new0923'
with open(f'{name}.txt', 'a') as f:
    a, d, dx = AnalyzeAPK(f"dataset/raw/train/{name}.apk")
    cg = dx.get_call_graph()
    for node in cg.nodes:
        parameters = ""
        print(node.method.get_descriptor())
        for x in str(node.method.get_descriptor()[1:].split(")")[0]).replace("/", ".").split(';'):
            x = x.strip()
            try:
                if "[B" in x:
                    tmp = "byte"
                    for i in range(x.count("[B")):
                        tmp += "[]"
                    x = tmp
                if x[0] == 'L':
                    x = x[1:]

                parameters += f",{x}"
            except:
                continue
        class_name = str(node.class_name)[
            1:-1].replace("/n", "").replace("/", ".")
        f.write("|{}| |{}| |{}|\n".format(
            class_name, str(node.method.name), str(parameters[1:])))
